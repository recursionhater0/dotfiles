#!/usr/bin/env zsh

# `.completions` handles all custom auto-completions.

# Enable hidden files on completion:
setopt globdots

# Uncomment to set `CTRL-k` to show debug info:
# Usage: `your command <CTRL-k>`
# bindkey '^k' _complete_help


# === fzf-git ===
# This is a copy-paste with modifications from
# https://github.com/junegunn/fzf-git.sh
# Which is cool, but very complex for my use-case,
# I only need commit log with interactive diffs.

__fzf_git_check() {
  git rev-parse HEAD > /dev/null 2>&1 && return
  return 1
}

__fzf_git_pager() {
  echo "delta --syntax-theme="$SOBOLE_SYNTAX_THEME""
}

_fzf_git_fzf() {
  fzf --no-separator --multi --min-height 30 \
    --layout reverse \
    --preview-window 'right,55%' "$@"
}

_fzf_git_hashes() {
  __fzf_git_check || return

  git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph "$@" |
  _fzf_git_fzf --ansi --no-sort \
    --border-label 'Hashes ' \
    --header-lines 2 \
    --bind "ctrl-d:execute:echo {} | cut -d' ' -f3 | xargs git diff > /dev/tty" \
    --bind "ctrl-o:execute:echo {} | cut -d' ' -f3 | xargs git show > /dev/tty" \
    --preview "echo {} | cut -d' ' -f3 | xargs git show | $(__fzf_git_pager)" "$@" |
  awk 'match($0, /[a-f0-9][a-f0-9][a-f0-9][a-f0-9][a-f0-9][a-f0-9][a-f0-9][a-f0-9]*/) { print substr($0, RSTART, RLENGTH) }'
}

# USAGE:
# - `ctrl+h` will show the hashes or `diff` screen
# - - from there `ctrl+d` will open a `diff` view since that commit
# - - from there `ctrl+o` will open that commit with `show`
zle -N _fzf_git_hashes
bindkey ^h _fzf_git_hashes


# === fzf-tab ===
# https://github.com/Aloxaf/fzf-tab

# enable hidden files on completion
zstyle ':completion:*' special-dirs true
# hide parents
zstyle ':completion:*' ignored-patterns '.|..|.DS_Store|**/.|**/..|**/.DS_Store|**/.git'
# hide `..` and `.` from file menu
zstyle ':completion:*' ignore-parents 'parent pwd directory'
# force zsh not to show completion menu,
# which allows fzf-tab to capture the unambiguous prefix
zstyle ':completion:*' menu no

# switch groups using `[` and `]`
zstyle ':fzf-tab:*' switch-group '[' ']'

# use the same layout as others and respect my default
local fzf_flags
zstyle -a ':fzf-tab:*' fzf-flags fzf_flags
fzf_flags=( "${fzf_flags[@]}" '--layout=reverse-list' )
zstyle ':fzf-tab:*' fzf-flags $fzf_flags

# Tools to autocomplete:
# ----------------------
# Big sources of inspiration:
# - https://github.com/Freed-Wu/fzf-tab-source
# - https://github.com/DanielFGray/fzf-scripts

# complete `fzf`
compdef _gnu_generic fzf

# complete `ls` / `cat` / etc
zstyle ':fzf-tab:complete:(\\|*/|)(ls|gls|bat|cat|cd|rm|cp|mv|ln|nano|code|open|tail|tree|source):*' \
  fzf-preview \
  '_fzf_complete_realpath "$realpath"'

# complete `make`
zstyle ':fzf-tab:complete:(\\|*/|)make:*' fzf-preview \
  'case "$group" in
  "[make target]")
    make -n "$word" | _fzf_complete_realpath
    ;;
  "[make variable]")
    make -pq | ag "^$word =" | _fzf_complete_realpath
    ;;
  "[file]")
    _fzf_complete_realpath "$realpath"
    ;;
  esac'

# complete `killall`
zstyle ':completion:*:*:killall:*:*' command 'ps -u "$USERNAME" -o comm'
zstyle ':fzf-tab:complete:(\\|*/|)killall:*' fzf-preview \
  'ps aux | ag "$word" | _fzf_complete_realpath'

# complete `zoxide`
_z () {
  # I have a custom completion, because I like `z NAME<TAB>`
  # and not `z NAME<SPACE><TAB>`
  local cmds
  cmds=( ${(uf)"$(zoxide query -l)"} )
  _describe 'filenames' cmds
}

compdef _z z
zstyle ':fzf-tab:complete:(\\|*/|)z:*' fzf-preview \
  '_fzf_complete_realpath "$word"'
